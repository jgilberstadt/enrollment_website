package edu.wustl.mir.ctt;

import edu.wustl.mir.ctt.calc.CrossoverEligibilityCalculator;
import edu.wustl.mir.ctt.calc.EnrollmentDetermination;
import edu.wustl.mir.ctt.calc.StudyArmEligibilityCalculator;
import edu.wustl.mir.ctt.form.CrossoverEligibilityWorkSheet;
import edu.wustl.mir.ctt.form.CrossoverSafetyCheckForm;
import edu.wustl.mir.ctt.form.EligibilityForm;
import edu.wustl.mir.ctt.form.EnrollStudyArmEligForm;
import edu.wustl.mir.ctt.form.EnrollmentForm;
import edu.wustl.mir.ctt.form.StudyArmEligibilityForm;
import edu.wustl.mir.ctt.model.Participant;
import edu.wustl.mir.ctt.model.Site;
import edu.wustl.mir.ctt.model.StudyArmStatus;
import edu.wustl.mir.ctt.persistence.PersistenceException;
import edu.wustl.mir.ctt.persistence.PersistenceManager;
import edu.wustl.mir.ctt.persistence.ServiceRegistry;
import edu.wustl.mir.ctt.calc.EnrollmentService;
import edu.wustl.mir.ctt.directory.DirectoryManagerException;
import edu.wustl.mir.ctt.model.DeclineStrata;
import edu.wustl.mir.ctt.model.SpirometryStrata;
import edu.wustl.mir.ctt.notification.NotificationContent;
import edu.wustl.mir.ctt.notification.NotificationException;
import edu.wustl.mir.ctt.notification.NotificationManager;
import edu.wustl.mir.ctt.notification.NotificationType;
import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.validator.ValidatorException;
import org.apache.log4j.Logger;
//import wsclient.WebServiceException_Exception;

@ManagedBean
@SessionScoped
public class CalcController implements Serializable {
    private EligibilityForm eligibilityForm;
    private StudyArmEligibilityForm studyArmEligibilityForm;
    private EnrollmentForm enrollmentForm;
//    private EnrollStudyArmEligForm enrollStudyArmEligForm;

//    private CrossoverEligibilityWorkSheet crossoverEligibilityWorkSheet;
    private CrossoverSafetyCheckForm crossoverSafetyCheckForm;
    private CrossoverEligibilityCalculator crossoverEligibilityCalculator;
    private StudyArmEligibilityCalculator studyArmEligibilityCalculator;
    private EnrollmentDetermination determination;
    private Participant participant;
    
    // The participant or patient id (pid) is a string of format xxxxxx and is not the participant table id which is an autogenerated integer returned by the enrollment webservice.
    private String pid = "";
    private StudyArmStatus arm;
    private String compareDatesErrorMessage;
    
    private Logger logger;
    
    @ManagedProperty(value="#{controller}")
    private Controller controller;
    
    public CalcController() {
        eligibilityForm = new EligibilityForm();
        enrollmentForm = new EnrollmentForm();
//        enrollStudyArmEligForm = new EnrollStudyArmEligForm();
        studyArmEligibilityForm = new StudyArmEligibilityForm();
//        crossoverEligibilityWorkSheet = new CrossoverEligibilityWorkSheet();
        crossoverSafetyCheckForm = new CrossoverSafetyCheckForm();
        logger = Logger.getLogger(CalcController.class);
    }
    
    public Controller getController() {
        return controller;
    }
    
    public void setController( Controller controller) {
        this.controller = controller;
    }
    
    public EligibilityForm getEligibilityForm() {
        return eligibilityForm;
    }
    
    public void setEligibilityForm(EligibilityForm eform) {
        this.eligibilityForm = eform;
    }
    
    public EnrollmentForm getEnrollmentForm() {
        return enrollmentForm;
    }
    
    public StudyArmEligibilityForm getStudyArmEligibilityForm() {
        return studyArmEligibilityForm;
    }
    
//    public EnrollStudyArmEligForm getEnrollStudyArmEligForm() {
//        return enrollStudyArmEligForm;
//    }
    
    public CrossoverEligibilityWorkSheet getCrossoverEligibilityWorkSheet() {
        return controller.getCrossoverEligibilityWorkSheet();
    }
    
    public String getParticipantID() {
        // The participant or patient id (pid) is a string of format xxxxxx and is not the participant table id which is an autogenerated integer returned by the enrollment webservice.
        return pid;
    }
    
    public StudyArmStatus getParticipantStudyArm() {
        return arm;
    }
    
    public String getParticipantStudyArmName() {
        return arm.getName();
    }
    
    public List<String> getViolations() {
        return new ArrayList<String>();
    }
    
    public String getRule() {
        return studyArmEligibilityCalculator.getOutcomeRule();
    }

    public float getPValue() {
        return studyArmEligibilityCalculator.getPValue();
    }
    
    public float getSlope() {
        return studyArmEligibilityCalculator.getSlope();
    }
    
    public float getMinFev() {
        return studyArmEligibilityCalculator.getMinFev();
    }
    
    public float getLastFev() {
        return studyArmEligibilityCalculator.getLastFev();
    }
    
    public StudyArmStatus getArm() {
        return arm;
    }
    
    public String getFev1OldestPossibleDate() {
        Date date = new Date();
        System.out.println("The calcController getFev1OldestPossibleDate is: " + date);
        return date.toString();
    }

    public CrossoverEligibilityCalculator getCrossoverEligibilityCalculator() {
        return crossoverEligibilityCalculator;
    }
    
    public CrossoverSafetyCheckForm getCrossoverSafetyCheckForm() {
        return crossoverSafetyCheckForm;
    }
    
    public String calculateStudyArmEligibilityAction() {
        studyArmEligibilityCalculator = new StudyArmEligibilityCalculator( studyArmEligibilityForm);
        return "/studyArmEligibilityResults.xhtml?faces-redirect=true";
    }

    // the user chooses to determine crossover eligibility.
    public String calculateCrossoverEligibilityAction() throws PersistenceException {
        CrossoverEligibilityWorkSheet cews = controller.getCrossoverEligibilityWorkSheet();
        System.out.println("\nThe crossoverEligibilityWordsheet date is: " + cews.getDate() + "\n");
        crossoverEligibilityCalculator = new CrossoverEligibilityCalculator( cews);
        cews.setSlope(crossoverEligibilityCalculator.getSlope());
        cews.setSignificance(crossoverEligibilityCalculator.getPValue());
        return "/crossoverResultsForm.xhtml?faces-redirect=true";
    }

    // the user acknowledges that the participant is not crossover eligible and returns to the particpant's page
    public String crossoverAcknowledgeAction() throws PersistenceException {
        return "/participant.xhtml?faces-redirect=true";
    }

    // the participant is crossover eligible and user chosses to accept crossover
    public String crossoverAcceptAction() throws PersistenceException, NotificationException {
        controller.addCrossoverEvent();
        return "/event.xhtml?faces-redirect=true";
    }

    // the user chooses to abort the crossover calculation.
    public String crossoverCancelAction() throws PersistenceException {
        return "/participant.xhtml?faces-redirect=true";
    }

    // the user chooses to override the calculator.
    public String crossoverOverrideAcceptAction() throws PersistenceException, NotificationException {
        controller.addCrossoverEvent();
        return "/event.xhtml?faces-redirect=true";
    }

    // the user chooses to not override the calculator.
    public String crossoverOverrideRejectAction() throws PersistenceException {
        Participant p = controller.getSelectedParticipant();
        PersistenceManager pm = ServiceRegistry.getPersistenceManager();
        pm.setOnHold( p.getParticipantID(), true, new Date());
        return "/participant.xhtml?faces-redirect=true";
    }

    public String determineEnrollmentAction() {
        determination = new EnrollmentDetermination( enrollmentForm);
        return "/enrollmentResults.xhtml?faces-redirect=true";
    }

    public void check(FacesContext context, UIComponent component, Object value) {
        String date = null;
        if(value == null) return;
        String c;
        if(value instanceof Date){
            date = value.toString();
        }
        if(date != null){
            FacesMessage message = edu.wustl.mir.ctt.model.Messages.getMessage("messages", "help", null);
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            throw new ValidatorException(message);
        } else {
            FacesMessage message = edu.wustl.mir.ctt.model.Messages.getMessage("messages", "no date found", null);
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            throw new ValidatorException(message);
        }
    }

    public void calculateISHLTBaselineListener() {
        Float firstComponentFev1  = eligibilityForm.getFirstComponentFEV1();
        Float secondComponentFev1 = eligibilityForm.getSecondComponentFEV1();
        Float baseline = 0.0f;
        
        if (firstComponentFev1 != null && secondComponentFev1 != null) {
            baseline = (firstComponentFev1 + secondComponentFev1) / 2;
        }
        
        eligibilityForm.setBaselineFEV1(baseline);
    }

    public void compareTwoConsentFormDates() {
        String messageDate1BeforeDate2 = "Question 4A and 4B have a DATE ENTRY ERROR!!! The Informed Consent Signed date is before the Informed Consent Version Date which should not occur.  The Informed Consent Form signed date should be on or after the Informed Consent Form Version date.";
        String messageDate1EqualsDate2 = "";
        String messageDate1AfterDate2 = "";
        Date d1 = enrollmentForm.getDateInformedConsentSigned();
        Date d2 = enrollmentForm.getDateInformedConsentVersion();
        compareDatesErrorMessage = this.getCompareTwoDates(d1, d2, messageDate1BeforeDate2, messageDate1EqualsDate2, messageDate1AfterDate2);
    }
    
    public void compareConsentAndFormDates() {
        String messageDate1BeforeDate2 = "Question 4A and Today's Date have a DATE ENTRY ERROR!!!  Today's Date is before the Informed Consent Form Signed Date which should not occur.  The Informed Consent Form signed date should be on or before Today's Date.";
        String messageDate1EqualsDate2 = "";
        String messageDate1AfterDate2 = "";
        Date d1 = enrollmentForm.getEnrollmentDate();
        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
        String stringd1 = sdf.format(d1);
        try {
            d1 = sdf.parse(stringd1);
        } catch (ParseException ex) {
            logger.error(ex);
        }
        Date d2 = enrollmentForm.getDateInformedConsentSigned();
        compareDatesErrorMessage = this.getCompareTwoDates(d1, d2, messageDate1BeforeDate2, messageDate1EqualsDate2, messageDate1AfterDate2);
    }
    
    public String getCompareDatesErrorMessage(){
        return compareDatesErrorMessage;
    }

    public String getCompareTwoDates(Date d1, Date d2, String message1, String message2, String message3) {
        String message = "";

        System.out.println("The first date is: " + d1 + "\n");
        System.out.println("The second date is: " + d2 + "\n");

        if(d1 == null || d2 == null){
            return message;
        } else {
            if(d1.before(d2)){
                message = message1;
            }
            if(d1.equals(d2)){
                message = message2;
            }
            if(d1.after(d2)){
                message = message3;
            }
            return message;
        }
    }
    
    public StudyArmStatus randomizeParticipant(int siteId, String participantId, DeclineStrata d, SpirometryStrata s) throws PersistenceException {
        StudyArmStatus st = StudyArmStatus.UNKNOWN;
        
        st = ServiceRegistry.getPersistenceManager().randomizeParticipant(siteId, participantId, d, s);
        
        return st;
    }

    public String deterEnrollStudyArmEligAction() throws NotificationException {
        String returnedResultsPage = null;
        determination = new EnrollmentDetermination( enrollmentForm);
        System.out.println("The consent signed date is: " + enrollmentForm.getDateInformedConsentSigned());
        System.out.println("The consent version date is: " + enrollmentForm.getDateInformedConsentVersion());
///        switch(enrollmentForm.getDateInformedConsentSigned().compareTo(enrollmentForm.getDateInformedConsentVersion())){
///            case -1: return "/enrollStudyArmEligForm.xhtml?faces-redirect=true";
///            case 0:  return "/enrollStudyArmEligForm.xhtml?faces-redirect=true";
///            case 1: System.out.println("The signed date is later than the version date. \n"); break;
///        }
        // Do not allow enrollment into study and study arm determination if the participant is not eligible for being in the study.
        // If the participant ID has already been assigned by going through the following set of code once, don't allow it again,
        // because the pid is assigned to the participant when the enroll methods listed below are executed.  If the website user
        // selects the browser back arrow, and then select submitting the page again, the pid number will exist and the participant 
        // will not be allowed to be enrolled again and given another study arm assignment.
        if(determination.isEligibilityScreeningPassed() && pid == ""){
            studyArmEligibilityCalculator = new StudyArmEligibilityCalculator( studyArmEligibilityForm);

            if( isDeclineScreeningPassed()){
                try {
                    // Enroll participant
                    Site site = controller.getSelectedSite();
                    enrollParticipantIntoECPStudyAction(); // sets pid and participant
                    
                    DeclineStrata d = studyArmEligibilityCalculator.getDeclineStrata();
                    SpirometryStrata s = studyArmEligibilityCalculator.getSpirometryStrata();
                    
                    participant.setDeclineStrata(d);
                    participant.setSpirometryStrata(s);
                    
                    StudyArmStatus status = randomizeParticipant(site.getSiteID(), pid, d, s);
                    
                    if (status == StudyArmStatus.EPI_ARM) {
                        returnedResultsPage = enrollParticipantIntoEPIArmAction();
                    } else if (status == StudyArmStatus.CONTROL_ARM) {
                        returnedResultsPage = enrollIntoControlArmAction();
                    }
                    
                } catch (PersistenceException ex) {
                    logger.error(ex);
                }
            }
            else {
                FacesContext context = FacesContext.getCurrentInstance();
                FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Validation Error", "Unexpected problem making study-arm assignment.");
                context.addMessage( null, msg);
                returnedResultsPage = "/enrollmentFailure.xhtml?faces-redirect=true";
            }
        } else if(determination.isEligibilityScreeningPassed() && pid != ""){
            return "/pidAlreadyAssigned.xhtml?faces-redirect=true";
        } else {
            return "/enrollmentResults.xhtml?faces-redirect=true";
        }
        return returnedResultsPage;
    }

    public String cancelCalculationAction() {
        eligibilityForm.clear();
        enrollmentForm.clear();
        return "/site.xhtml?faces-redirect=true";
    }

    public String cancelEnrollmentAction() {
        eligibilityForm.clear();
        enrollmentForm.clear();
        return "/site.xhtml?faces-redirect=true";
    }
    
    public String reviewEnrollmentDataAction() {
        return "/enrollStudyArmEligForm.xhtml?faces-redirect=true";
    }

    public String registryAction() {
        return "/eligibilityForm.xhtml?faces-redirect=true";
    }

    public String continueToRegistryAction() {
        return "/site.xhtml?faces-redirect=true";
    }

    public String continueToStudyArmEligibilityFormAction() {
        studyArmEligibilityForm.clear();
        return "/studyArmEligibilityForm.xhtml?faces-redirect=true";
    }

    public String homeAction() {
        return "/siteResources.xhtml?faces-redirect=true";
    }
    
//    public String checkEnrollmentAction() {
//        enrollmentForm.clear();
//        return "/enrollmentForm.xhtml?faces-redirect=true";
//    }
    
    public String checkEnrollStudyArmEligAction() throws PersistenceException, DirectoryManagerException {
        String returnForm = null;
        pid = "";
        enrollmentForm.clear();
        studyArmEligibilityForm.clear();
        
        // The following object can be used to preset the inclusion/exclusion criteria along with the FEV1s dates with values and FVCs.
////        InclusionExclusionFEV1sPreset iefp = new InclusionExclusionFEV1sPreset( enrollmentForm, studyArmEligibilityForm);
        
        // Paul K. Commean had to add the controller.registryLoginAction(); line of code to the calcController.checkEnrollStudyArmEligAction() method because 
        // a NullPointerException occurs in the calcController.enrollParticipantIntoECPStudyAction (CalcController.java:410) when the 
        // Enrollment Assessment and Study Arm Eligibility form has been filled out and the individual filling out the form has selected the 
        // 'Determine Enrollment and Study Arm Elibility' button.
        // When the 'Determine Enrollment/Arm Eligibility' button is selected, it first executes the calcController.checkEnrollStudyArmEligAction() method then
        // the enrollParticipantIntoECPStudyAction() method (see method below).  The enrollParticipantIntoECPStudyAction()method expects the controller's  
        // selectedSite (via the controller.getSelectedSite()) to have been determined already but the controller does not know the site at this point.  The 
        // controller knows the site after running the controller.registryLoginAction() which occurs when you select the Registry button from the main menu.
        // Therefore, by adding controller.registryLoginAction() statement to this method, the controller's selected site is set, and the
        // participant can be enrolled in the study using the CalcController's enrollParticipantIntoECPStudyAction() method listed below.
        controller.determineSiteBasedOnUsersLoginInfo();
        Site site = controller.getSelectedSite();
        System.out.println("In the CalcController from the controller, the site name is: " + site.getName() + "\n");
        System.out.println("The CRF Version number is: " + site.getCrfVersion() + "\n");
        System.out.println("The IRB Version number is: " + site.getIrbVersion() + "\n");
        System.out.println("The IRB submission date is: " + site.getIrbSubmittedDate() + "\n");
        enrollmentForm.setCrfVersion(site.getCrfVersion());
        enrollmentForm.versionControl();
        enrollmentForm.setIrbVersion(site.getIrbVersion());
        enrollmentForm.setIrbSubmittedDate(site.getIrbSubmittedDate());
//        if(site.getCrfVersion().equals("1.0")){
//            returnForm = "/enrollStudyArmEligForm.xhtml?faces-redirect=true";
//        }
        if(site.getCrfVersion().equals("5.0")){
            enrollmentForm.addLeukopeniaAttribute();
//            returnForm = "/enrollStudyArmEligForm.xhtml?faces-redirect=true";
        }
        return "/enrollStudyArmEligForm.xhtml?faces-redirect=true";
    }
    
    public boolean isDeclineScreeningPassed() {
        return studyArmEligibilityCalculator.isDeclineScreeningPassed();
    }

    public boolean isEligibilityScreeningPassed() {
        return determination.isEligibilityScreeningPassed();
    }

    public boolean isEligibilityScreeningFailed() {
        return determination.isEligibilityScreeningFailed();
    }

//    public Date getFev1OldestDate() {
//        return studyArmEligibilityCalculator.getFev1OldestPossibleDate();
//   }
    // Web Service Version
//    public String enrollAction() throws PersistenceException {
//        PersistenceManager pm = ServiceRegistry.getPersistenceManager();
//        Site site = pm.getSite("WashU");
//        
//        wsclient.Site clientSite = new wsclient.Site();
//        wsclient.EligibilityForm clientForm = new wsclient.EligibilityForm();
//        
//        clientSite.setName( site.getName());
//        clientSite.setSiteID( site.getSiteID());
////        wsclient.SiteStatus clientStatus = clientStatus.;
////        clientSite.setStatus( site.getStatus());
//        
//        try {
//            pid = enroll( clientForm, clientSite);
//            return "/calc/success.xhtml";
//        } catch (WebServiceException_Exception ex) {
//            String msg = "enrollAction failed.";
//            Logger.getLogger(CalcController.class.getName()).log(Level.SEVERE, msg, ex);
//            throw new PersistenceException( msg, ex);
//        }
//    }
    
    public String enrollAction() throws PersistenceException {
        PersistenceManager pm = ServiceRegistry.getPersistenceManager();
//        Site site = pm.getSite("WashU");
        Site site = controller.getSelectedSite();
                
        // The participant or patient id (pid) is a string of format xxxxxx and is not the participant table id which is an autogenerated integer returned by the enrollment webservice.
        pid = enroll( eligibilityForm, site);
        return "/calc/success.xhtml?faces-redirect=true";
    }
    
    public String enrollParticipantIntoECPStudyAction() throws PersistenceException {
        PersistenceManager pm = ServiceRegistry.getPersistenceManager();
//        Site site = pm.getSite("WashU");
        Site site = controller.getSelectedSite();
        System.out.println("From the controller, the site name is: " + site.getName() + "\n");
        System.out.println("From the controller, the site getId is: " + site.getId() + "\n");
        System.out.println("From the controller, the site getSiteId is: " + site.getSiteID()+ "\n");

        // The participant or patient id (pid) is a string of format xxxxxx and is not the participant table id which is an autogenerated integer returned by the enrollment webservice.
        pid = enrollParticipantIntoECPStudy( enrollmentForm, site);
        participant = EnrollmentService.getParticipant();
        return "/enrollmentSuccess.xhtml?faces-redirect=true";
    }
    
    // Enroll participant into the EPI (early photophoresis intervention) arm
    public String enrollParticipantIntoEPIArmAction() throws PersistenceException, NotificationException {
        studyArmEligibilityForm.setSlope(this.getSlope());  // Get Slope and save in the studyArmEligibilityForm for storage into the database
        studyArmEligibilityForm.setSignificance(this.getPValue());  // Get Significance and save in the studyArmEligibilityForm for storage into the database
        PersistenceManager pm = ServiceRegistry.getPersistenceManager();
        arm = StudyArmStatus.EPI_ARM;  // Early Photopheresis Intervention (EPI) Study Arm contains those participants that met the enrollment criteria with statistical significance and were randomized into this arm
        participant.setStudyArmStatus(arm);
        participant.setStudyArmEnrollDate(new Date());
//        Site site = pm.getSite("WashU");
        Site site = controller.getSelectedSite();
        
        // The participant or patient id (pid) is a string of format xxxxxx and is not the participant table id which is an autogenerated integer returned by the enrollment webservice.
        pid = enrollParticipantIntoStudyArm( site, participant, enrollmentForm, studyArmEligibilityForm);
        
        // Send out email to selected CCC/DCC personnel to notify them of a new participant enrollment into the EPI Arm
        NotificationManager nm = ServiceRegistry.getNotificationManager();
        NotificationContent content = new NotificationContent();
        content.setSiteName( site.getName());
        content.setParticipantId( participant.getParticipantID());
        content.setStudyArm(participant.getStudyArmStatus().getName());
        content.setUserName(controller.getCurrentUserName());
        
        nm.send( NotificationType.PARTICIPANT_ENROLLED, content);
        
        return "/studyArmEligibilitySuccess.xhtml?faces-redirect=true";
    }

    // Enroll participant into the Control Arm
    public String enrollIntoControlArmAction() throws PersistenceException, NotificationException {
        studyArmEligibilityForm.setSlope(this.getSlope());  // Get Slope and save in the studyArmEligibilityForm for storage into the database
        studyArmEligibilityForm.setSignificance(this.getPValue());  // Get Significance and save in the studyArmEligibilityForm for storage into the database
        PersistenceManager pm = ServiceRegistry.getPersistenceManager();
        arm = StudyArmStatus.CONTROL_ARM;  // Control arm contains those participants eligible for the study randomized into this arm
        participant.setStudyArmStatus(arm);
        participant.setStudyArmEnrollDate(new Date());
//        Site site = pm.getSite("WashU");
        Site site = controller.getSelectedSite();
        
        // The participant or patient id (pid) is a string of format xxxxxx and is not the participant table id which is an autogenerated integer returned by the enrollment webservice.
        pid = enrollParticipantIntoStudyArm( site, participant, enrollmentForm, studyArmEligibilityForm);

        // Send out email to selected CCC/DCC personnel to notify them of a new participant enrollment into the Control Arm
        NotificationManager nm = ServiceRegistry.getNotificationManager();
        NotificationContent content = new NotificationContent();
        content.setSiteName( site.getName());
        content.setParticipantId( participant.getParticipantID());
        content.setStudyArm(participant.getStudyArmStatus().getName());
        content.setUserName(controller.getCurrentUserName());
        nm.send( NotificationType.PARTICIPANT_ENROLLED, content);
        
        return "/studyArmEligibilitySuccess.xhtml?faces-redirect=true";
    }
            
    /**
     * enroll
     * 
     * @param form
     * @param site
     * @return the participant or patient id which is a string of format xxxxxx assigned to the new participant, not the participant table id column which is integer.
     * @throws PersistenceException 
     */
    private String enroll( EligibilityForm form, Site site) throws PersistenceException {
        return EnrollmentService.enrollParticipant(site, form);
    }

    private String enrollParticipantIntoECPStudy( EnrollmentForm form, Site site) throws PersistenceException {
//        return EnrollmentService.enrollParticipant(site, form, arm);
        return EnrollmentService.enrollParticipantIntoECPStudy(site, form);
    }

    private String enrollParticipantIntoStudyArm( Site site, Participant participant, EnrollmentForm form, StudyArmEligibilityForm studyArmEligibilityForm) throws PersistenceException {
//        return EnrollmentService.enrollParticipant(site, form, arm);
        return EnrollmentService.enrollParticipantIntoStudyArm(site, participant, form, studyArmEligibilityForm);
    }

//    private static String enroll(wsclient.EligibilityForm form, wsclient.Site site) throws WebServiceException_Exception {
//        wsclient.RegistryWS_Service service = new wsclient.RegistryWS_Service();
//        wsclient.EnrollmentService port = service.getRegistryWSPort();
//        return port.enroll(form, site);
//    }

}
